#!/bin/bash

# Power Grid Builder - RHEL/CentOS/Rocky Linux Installation Script
# Comprehensive installation script for Red Hat Enterprise Linux and derivatives
# Supports RHEL 7, 8, 9 and compatible distributions (CentOS, Rocky Linux, AlmaLinux)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
CONTAINER_NAME="power-grid-builder"
IMAGE_NAME="power-grid-builder:latest"
HOST_PORT="8080"
CONTAINER_PORT="80"
RHEL_VERSION=""
PACKAGE_MANAGER=""

# Function to print colored output
print_status() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_header() {
    echo -e "${PURPLE}🔧 $1${NC}"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if user is in docker group
user_in_docker_group() {
    groups "$USER" | grep -q '\bdocker\b'
}

# Function to detect RHEL version and variant
detect_rhel_variant() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo "$ID:$VERSION_ID"
    elif [ -f /etc/redhat-release ]; then
        if grep -q "CentOS" /etc/redhat-release; then
            echo "centos:$(grep -o '[0-9]\+' /etc/redhat-release | head -1)"
        elif grep -q "Red Hat" /etc/redhat-release; then
            echo "rhel:$(grep -o '[0-9]\+' /etc/redhat-release | head -1)"
        else
            echo "unknown:0"
        fi
    else
        echo "unknown:0"
    fi
}

# Function to check system requirements
check_system_requirements() {
    print_header "Checking system requirements..."
    
    local variant_info=$(detect_rhel_variant)
    local distro=$(echo $variant_info | cut -d: -f1)
    local version=$(echo $variant_info | cut -d: -f2)
    
    print_status "Detected system: $distro $version"
    
    # Check if it's a supported RHEL-based system
    case $distro in
        rhel|centos|fedora|rocky|almalinux)
            print_success "Supported RHEL-based system detected"
            ;;
        *)
            print_error "Unsupported system: $distro"
            print_status "This script is designed for RHEL, CentOS, Fedora, Rocky Linux, or AlmaLinux"
            exit 1
            ;;
    esac
    
    # Check minimum version for RHEL/CentOS
    if [[ "$distro" == "rhel" || "$distro" == "centos" ]]; then
        if [ "${version%%.*}" -lt "$MINIMUM_RHEL_VERSION" ]; then
            print_error "Minimum RHEL/CentOS version $MINIMUM_RHEL_VERSION required, found version $version"
            exit 1
        fi
    fi
    
    # Check available disk space (minimum 2GB)
    local available_space=$(df / | awk 'NR==2 {print $4}')
    local required_space=2097152  # 2GB in KB
    
    if [ "$available_space" -lt "$required_space" ]; then
        print_warning "Low disk space detected. At least 2GB free space recommended."
        read -p "Do you want to continue? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    # Check if running as root (not recommended for Docker)
    if [ "$EUID" -eq 0 ]; then
        print_warning "Running as root is not recommended for Docker operations."
        print_status "This script will create a non-root Docker setup."
    fi
    
    print_success "System requirements check passed"
}

# Function to setup package manager
setup_package_manager() {
    print_header "Setting up package manager..."
    
    local variant_info=$(detect_rhel_variant)
    local distro=$(echo $variant_info | cut -d: -f1)
    
    if command_exists dnf; then
        PKG_MANAGER="dnf"
        PKG_INSTALL="dnf install -y"
        PKG_UPDATE="dnf update -y"
        PKG_REPO="dnf config-manager --add-repo"
    elif command_exists yum; then
        PKG_MANAGER="yum"
        PKG_INSTALL="yum install -y"
        PKG_UPDATE="yum update -y"
        PKG_REPO="yum-config-manager --add-repo"
    else
        print_error "Neither dnf nor yum package manager found!"
        exit 1
    fi
    
    print_success "Using package manager: $PKG_MANAGER"
    
    # Update package cache
    print_status "Updating package cache..."
    sudo $PKG_UPDATE
    
    # Install essential tools if not present
    print_status "Installing essential tools..."
    sudo $PKG_INSTALL \
        curl \
        wget \
        git \
        yum-utils \
        device-mapper-persistent-data \
        lvm2
    
    print_success "Package manager setup complete"
}

# Function to install Docker CE on RHEL-based systems
install_docker_rhel() {
    print_header "Installing Docker CE on RHEL-based system..."
    
    local variant_info=$(detect_rhel_variant)
    local distro=$(echo $variant_info | cut -d: -f1)
    local version=$(echo $variant_info | cut -d: -f2)
    
    # Remove old Docker versions if they exist
    print_status "Removing old Docker installations..."
    sudo $PKG_MANAGER remove -y \
        docker \
        docker-client \
        docker-client-latest \
        docker-common \
        docker-latest \
        docker-latest-logrotate \
        docker-logrotate \
        docker-engine \
        podman \
        runc 2>/dev/null || true
    
    # Handle different RHEL variants
    case $distro in
        fedora)
            print_status "Installing Docker on Fedora..."
            sudo $PKG_INSTALL dnf-plugins-core
            sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
            ;;
        centos|rhel)
            print_status "Installing Docker on $distro..."
            sudo $PKG_INSTALL yum-utils
            if [ "${version%%.*}" -eq 7 ]; then
                # CentOS/RHEL 7
                sudo $PKG_REPO $DOCKER_REPO_URL
            else
                # CentOS/RHEL 8+
                sudo $PKG_REPO $DOCKER_REPO_URL
                # Enable container-tools module for RHEL 8+
                if [[ "$distro" == "rhel" && "${version%%.*}" -ge 8 ]]; then
                    sudo dnf module enable -y container-tools
                fi
            fi
            ;;
        rocky|almalinux)
            print_status "Installing Docker on $distro..."
            sudo $PKG_INSTALL yum-utils
            sudo $PKG_REPO $DOCKER_REPO_URL
            ;;
    esac
    
    # Update package index after adding repository
    print_status "Updating package cache with Docker repository..."
    sudo $PKG_UPDATE
    
    # Install Docker CE
    print_status "Installing Docker CE..."
    sudo $PKG_INSTALL \
        docker-ce \
        docker-ce-cli \
        containerd.io \
        docker-buildx-plugin \
        docker-compose-plugin
    
    print_success "Docker CE installed successfully!"
}

# Function to configure SELinux for Docker
configure_selinux() {
    print_header "Configuring SELinux for Docker..."
    
    if command_exists getenforce && [ "$(getenforce)" != "Disabled" ]; then
        print_status "SELinux is enabled, configuring Docker policies..."
        
        # Install SELinux policy packages
        sudo $PKG_INSTALL \
            policycoreutils-python-utils \
            selinux-policy-devel 2>/dev/null || \
        sudo $PKG_INSTALL \
            policycoreutils-python \
            selinux-policy-devel 2>/dev/null || true
        
        # Set SELinux context for Docker
        if command_exists setsebool; then
            sudo setsebool -P container_manage_cgroup true 2>/dev/null || true
        fi
        
        print_success "SELinux configured for Docker"
    else
        print_status "SELinux is disabled or not present"
    fi
}

# Function to configure firewall
configure_firewall() {
    print_header "Configuring firewall..."
    
    if systemctl is-active --quiet firewalld; then
        print_status "Firewalld is active, configuring Docker rules..."
        
        # Add Docker service to firewall
        sudo firewall-cmd --permanent --add-service=docker 2>/dev/null || true
        
        # Open application port
        sudo firewall-cmd --permanent --add-port=${HOST_PORT}/tcp
        
        # Reload firewall
        sudo firewall-cmd --reload
        
        print_success "Firewall configured for Docker and application port $HOST_PORT"
    elif systemctl is-active --quiet iptables; then
        print_warning "iptables is active. You may need to manually configure firewall rules."
        print_status "Required port: $HOST_PORT/tcp"
    else
        print_status "No active firewall detected"
    fi
}

# Function to setup Docker service
setup_docker_service() {
    print_header "Setting up Docker service..."
    
    # Enable Docker service
    sudo systemctl enable docker
    
    # Start Docker service
    sudo systemctl start docker
    
    # Wait for Docker to be ready
    print_status "Waiting for Docker service to be ready..."
    local attempts=0
    local max_attempts=30
    
    while ! docker info >/dev/null 2>&1; do
        if [ $attempts -ge $max_attempts ]; then
            print_error "Docker service failed to start after $max_attempts attempts"
            print_status "Check Docker service status: sudo systemctl status docker"
            exit 1
        fi
        
        attempts=$((attempts + 1))
        print_status "Waiting for Docker... (attempt $attempts/$max_attempts)"
        sleep 2
    done
    
    # Add current user to docker group
    if ! user_in_docker_group; then
        print_status "Adding user $USER to docker group..."
        sudo usermod -aG docker "$USER"
        print_warning "User added to docker group. Please log out and log back in for changes to take effect."
        print_status "Or run: newgrp docker"
    fi
    
    # Test Docker installation
    print_status "Testing Docker installation..."
    if sudo docker run --rm hello-world >/dev/null 2>&1; then
        print_success "Docker test successful!"
    else
        print_warning "Docker test failed, but installation appears complete"
    fi
    
    print_success "Docker service configured successfully!"
}

# Function to install Node.js (required for npm scripts)
install_nodejs() {
    print_header "Checking Node.js installation..."
    
    if command_exists node && command_exists npm; then
        local node_version=$(node --version | sed 's/v//')
        print_success "Node.js $node_version is already installed"
        return
    fi
    
    print_status "Node.js not found, installing..."
    
    # Install Node.js from NodeSource repository
    curl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -
    sudo $PKG_INSTALL nodejs
    
    # Verify installation
    if command_exists node && command_exists npm; then
        local node_version=$(node --version)
        local npm_version=$(npm --version)
        print_success "Node.js $node_version and npm $npm_version installed successfully!"
    else
        print_error "Node.js installation failed"
        exit 1
    fi
}

# Function to check if port is available
check_port() {
    print_status "Checking port availability..."
    
    if command_exists ss && ss -tuln | grep -q ":$HOST_PORT "; then
        print_warning "Port $HOST_PORT is already in use!"
        read -p "Do you want to use a different port? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            read -p "Enter new port number (1024-65535): " NEW_PORT
            if [[ $NEW_PORT =~ ^[0-9]+$ ]] && [ $NEW_PORT -ge 1024 ] && [ $NEW_PORT -le 65535 ]; then
                HOST_PORT=$NEW_PORT
                print_success "Using port $HOST_PORT"
            else
                print_error "Invalid port number!"
                exit 1
            fi
        else
            print_error "Cannot proceed with port $HOST_PORT in use!"
            exit 1
        fi
    elif command_exists netstat && netstat -tuln | grep -q ":$HOST_PORT "; then
        print_warning "Port $HOST_PORT is already in use!"
        # Same port selection logic as above
        read -p "Do you want to use a different port? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            read -p "Enter new port number (1024-65535): " NEW_PORT
            if [[ $NEW_PORT =~ ^[0-9]+$ ]] && [ $NEW_PORT -ge 1024 ] && [ $NEW_PORT -le 65535 ]; then
                HOST_PORT=$NEW_PORT
                print_success "Using port $HOST_PORT"
            else
                print_error "Invalid port number!"
                exit 1
            fi
        else
            print_error "Cannot proceed with port $HOST_PORT in use!"
            exit 1
        fi
    else
        print_success "Port $HOST_PORT is available"
    fi
}

# Function to clean up existing containers
cleanup_existing() {
    if docker ps -a --format 'table {{.Names}}' 2>/dev/null | grep -q "^${CONTAINER_NAME}$"; then
        print_status "Found existing container '$CONTAINER_NAME'"
        read -p "Do you want to remove it? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_status "Stopping and removing existing container..."
            docker stop $CONTAINER_NAME 2>/dev/null || true
            docker rm $CONTAINER_NAME 2>/dev/null || true
            print_success "Existing container removed"
        else
            print_error "Cannot proceed with existing container!"
            exit 1
        fi
    fi
}

# Function to build and run the application
build_and_run() {
    print_header "Building Power Grid Builder application..."
    
    # Check if Dockerfile exists
    if [ ! -f "Dockerfile" ]; then
        print_error "Dockerfile not found! Make sure you're in the project directory."
        exit 1
    fi
    
    # Build the Docker image
    print_status "Building Docker image (this may take a few minutes)..."
    if docker build -t $IMAGE_NAME .; then
        print_success "Docker image built successfully!"
    else
        print_error "Docker build failed!"
        exit 1
    fi
    
    # Run the container
    print_header "Starting Power Grid Builder container..."
    
    if docker run -d \
        --name $CONTAINER_NAME \
        -p ${HOST_PORT}:${CONTAINER_PORT} \
        --restart unless-stopped \
        $IMAGE_NAME; then
        print_success "Container started successfully!"
    else
        print_error "Failed to start container!"
        exit 1
    fi
    
    # Wait for application to be ready
    print_status "Waiting for application to start..."
    local attempts=0
    local max_attempts=30
    
    while ! curl -f http://localhost:${HOST_PORT} >/dev/null 2>&1; do
        if [ $attempts -ge $max_attempts ]; then
            print_warning "Application may still be starting. Check logs with: docker logs $CONTAINER_NAME"
            break
        fi
        
        attempts=$((attempts + 1))
        print_status "Waiting for application... (attempt $attempts/$max_attempts)"
        sleep 2
    done
}

# Function to show application info
show_info() {
    echo
    echo -e "${CYAN}🎉 Power Grid Builder Installation Complete!${NC}"
    echo -e "${CYAN}================================================${NC}"
    echo -e "🌐 Application URL: ${GREEN}http://localhost:${HOST_PORT}${NC}"
    echo -e "🐳 Container Name:  ${GREEN}${CONTAINER_NAME}${NC}"
    echo -e "🖼️  Image Name:     ${GREEN}${IMAGE_NAME}${NC}"
    echo
    echo -e "${YELLOW}Useful Docker Commands:${NC}"
    echo -e "  📊 View logs:        ${BLUE}docker logs ${CONTAINER_NAME}${NC}"
    echo -e "  ⏹️  Stop container:   ${BLUE}docker stop ${CONTAINER_NAME}${NC}"
    echo -e "  ▶️  Start container:  ${BLUE}docker start ${CONTAINER_NAME}${NC}"
    echo -e "  🗑️  Remove container: ${BLUE}docker rm ${CONTAINER_NAME}${NC}"
    echo -e "  🔄 Restart container: ${BLUE}docker restart ${CONTAINER_NAME}${NC}"
    echo
    echo -e "${YELLOW}System Information:${NC}"
    echo -e "  🖥️  OS: ${BLUE}$(detect_rhel_variant | tr ':' ' ')${NC}"
    echo -e "  🐳 Docker Version: ${BLUE}$(docker --version 2>/dev/null || echo 'Not accessible')${NC}"
    echo -e "  📦 Container Runtime: ${BLUE}$(docker info --format '{{.ServerVersion}}' 2>/dev/null || echo 'Not accessible')${NC}"
    echo
    echo -e "${YELLOW}Troubleshooting:${NC}"
    echo -e "  🔧 Check Docker status: ${BLUE}sudo systemctl status docker${NC}"
    echo -e "  🔧 Check application logs: ${BLUE}docker logs ${CONTAINER_NAME}${NC}"
    echo -e "  🔧 Check firewall: ${BLUE}sudo firewall-cmd --list-ports${NC}"
    echo -e "  🔧 Restart Docker: ${BLUE}sudo systemctl restart docker${NC}"
    echo
}

# Main installation function
main() {
    echo -e "${PURPLE}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║            Power Grid Builder - RHEL Installation             ║"
    echo "║         Docker-based Power Grid Simulation Game               ║"
    echo "║       Supports RHEL, CentOS, Fedora, Rocky, AlmaLinux        ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    # Check if script is run from project directory
    if [ ! -f "package.json" ] || ! grep -q "power-grid-builder" package.json; then
        print_error "This script must be run from the Power Grid Builder project directory!"
        print_status "Please navigate to the project directory and run: ./install-rhel.sh"
        exit 1
    fi
    
    # Check system requirements
    check_system_requirements
    
    # Setup package manager
    setup_package_manager
    
    # Check if Docker is already installed
    if command_exists docker; then
        print_success "Docker is already installed!"
        local docker_version=$(docker --version 2>/dev/null || echo "unknown")
        print_status "Docker version: $docker_version"
    else
        print_status "Docker not found, proceeding with installation..."
        
        # Install Docker
        install_docker_rhel
        
        # Configure SELinux
        configure_selinux
        
        # Configure firewall
        configure_firewall
        
        # Setup Docker service
        setup_docker_service
    fi
    
    # Install Node.js if needed
    install_nodejs
    
    # Check if Docker service is running
    if ! systemctl is-active --quiet docker; then
        print_status "Starting Docker service..."
        sudo systemctl start docker
    fi
    
    # Check if user can run Docker commands
    if ! docker info >/dev/null 2>&1; then
        print_warning "Cannot run Docker commands without sudo."
        print_status "This is normal after initial installation."
        print_warning "You may need to log out and log back in, or run: newgrp docker"
        
        read -p "Do you want to continue with sudo? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_status "Installation paused. Please log out and log back in, then run this script again."
            exit 0
        fi
    fi
    
    print_success "Docker is ready!"
    
    # Check port availability
    check_port
    
    # Clean up existing containers
    cleanup_existing
    
    # Build and run the application
    build_and_run
    
    # Show application information
    show_info
    
    # Try to open browser (if possible)
    if command_exists firefox; then
        print_status "Opening Firefox browser..."
        firefox "http://localhost:${HOST_PORT}" >/dev/null 2>&1 &
    elif command_exists google-chrome; then
        print_status "Opening Chrome browser..."
        google-chrome "http://localhost:${HOST_PORT}" >/dev/null 2>&1 &
    elif command_exists xdg-open; then
        print_status "Opening default browser..."
        xdg-open "http://localhost:${HOST_PORT}" >/dev/null 2>&1 &
    else
        print_status "Please open your browser and visit: http://localhost:${HOST_PORT}"
    fi
    
    print_success "RHEL installation completed successfully! 🎉"
    
    if ! user_in_docker_group; then
        echo
        print_warning "IMPORTANT: You have been added to the docker group."
        print_warning "Please log out and log back in for the changes to take effect."
        print_status "After logging back in, you can manage containers without sudo."
    fi
}

# Handle script interruption
trap 'print_error "Installation interrupted!"; exit 1' INT TERM

# Check if running with appropriate privileges
if [ "$EUID" -eq 0 ]; then
    print_warning "This script should not be run as root!"
    print_status "Please run as a regular user. The script will use sudo when needed."
    exit 1
fi

# Run main function
main "$@"
